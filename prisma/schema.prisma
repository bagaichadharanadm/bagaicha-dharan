generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // URL for connecting to the database
  directUrl = env("DIRECT_URL") // Direct URL for the database connection
}

// ================================================================
// AUTH MODELS
// ================================================================

// Account model for authentication providers (e.g., Google, Facebook)
model Account {
  id                String  @id @default(cuid()) // Unique identifier for the account
  userId            String // User ID to link with User model
  type              String // Type of authentication provider
  provider          String // Name of the provider (e.g., Google)
  providerAccountId String // Provider-specific account ID
  refresh_token     String? @db.Text // Refresh token (optional)
  access_token      String? @db.Text // Access token (optional)
  expires_at        Int? // Token expiration timestamp (optional)
  token_type        String? // Type of token (optional)
  scope             String? // OAuth scopes (optional)
  id_token          String? @db.Text // ID token (optional)
  session_state     String? // Session state (optional)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId]) // Ensure unique provider and account ID combination
}

// Enum for user roles
enum UserRole {
  ADMIN // Administrator role
  USER // Regular user role
}

// User model for application users
model User {
  id            String    @id @default(cuid()) // Unique identifier for the user
  name          String? // User's name (optional)
  email         String?   @unique // User's email (unique, optional)
  emailVerified DateTime? // Email verification timestamp (optional)
  image         String? // URL to the user's profile image (optional)
  password      String? // User's password (optional)
  role          UserRole  @default(USER) // User's role (default to USER)
  accounts      Account[] // Relation to the Account model
  // sessions      Session[]                        // Uncomment if using sessions
}

// VerificationToken model for email verification and password resets
model VerificationToken {
  identifier String // Identifier for the token (e.g., email)
  token      String   @unique // Unique token
  expires    DateTime // Token expiration timestamp

  @@unique([identifier, token]) // Ensure unique combination of identifier and token
}

// ================================================================
// RESTAURANT MODELS
// ================================================================

// Enum for employee positions
enum Position {
  ADMIN
  MANAGER
  CHEF
  HEAD_CHEF
  WAITER
  CASHIER
  CLEANER
}

// Enum for payment types
enum PaymentType {
  CASH
  CARD
  QR_PAYMENT
  CREDIT
}

// Enum for payment statuses
enum PaymentStatus {
  PAID
  CREDIT
  PARTIAL_PAID
}

enum ExpenseEntityType {
  SUPPLIER
  PERSONAL
}

enum ExpenseType {
  PERSONAL
  BUSINESS
}

model ItemMaster {
  id              String            @id @default(cuid())
  itemDesc_EN     String
  itemDesc_NEP    String?
  standardUOM     String
  comments        String?
  expenses        ExpenseLog[] // One-to-many: one product can have multiple expenses records
  supplier        SupplierMaster[] // One-to-many: one product can have multiple suppliers
  menuItems       MenuItemProduct[]
  credit          Credit[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  SupplierExpense SupplierExpense[]
  isActive        Boolean           @default(true)
}

model SupplierMaster {
  id               String            @id @default(cuid())
  supplierName_EN  String
  supplierName_NEP String?
  contactPhone     String?
  currencyCode     String?
  contactEmail     String?
  comments         String?
  suppliedItems    ItemMaster[]
  credit           Credit[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  isActive         Boolean           @default(true)
  SupplierExpense  SupplierExpense[]
  ExpenseLog       ExpenseLog[]
}

model Expense {
  id                String            @id @default(cuid())
  tranDate          DateTime          @default(now())
  paymentType       PaymentType
  paymentStatus     PaymentStatus
  expenseType       ExpenseType
  expenseEntityType ExpenseEntityType
  expenseEntityId   String // It can be either the person whom you are spending on or your supplier or your customer
  amountSpent       Float
  amountReceived    Float
  invoiceAmount     Float
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  SupplierExpense   SupplierExpense[]
  comment           String?
}

model SupplierExpense {
  id               String          @id @default(cuid())
  tranDate         DateTime        @default(now())
  supplierId       String
  supplier         String // Assuming you handle the supplier details via this string field
  itemId           String
  item             ItemMaster      @relation(fields: [itemId], references: [id])
  quantityReceived Decimal
  quantityDamaged  Decimal
  amountPaid       Decimal
  amountPending    Decimal
  expense          Expense         @relation(fields: [expenseId], references: [id])
  expenseId        String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  isActive         Boolean         @default(true)
  SupplierMaster   SupplierMaster? @relation(fields: [supplierMasterId], references: [id])
  supplierMasterId String?
  comment          String?
}

// Main table for expense staff expense tracking.
model ExpenseLog {
  id              String         @id @default(cuid())
  transactionDate DateTime
  itemId          String
  supplierId      String
  quantity        Int
  amount          Float
  invoice         Float
  paymentType     PaymentType
  paymentStatus   PaymentStatus
  comments        String?
  employeeId      String
  product         ItemMaster     @relation(fields: [itemId], references: [id])
  supplier        SupplierMaster @relation(fields: [supplierId], references: [id])
  employee        Employee       @relation(fields: [employeeId], references: [id])
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  isActive        Boolean        @default(true)
}

model Employee {
  id               String       @id @default(cuid())
  employeeName     String
  contactNumber    String?
  temporaryAddress String
  permanentAddress String
  position         Position
  joinDate         DateTime
  terminationDate  DateTime?
  expenses         ExpenseLog[]
  orders           Order[]
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  isActive         Boolean      @default(true)
}

model Credit {
  id          String         @id @default(cuid())
  itemID      String
  supplierID  String
  amount      Float
  credit_date DateTime
  supplier    SupplierMaster @relation(fields: [supplierID], references: [id])
  item        ItemMaster     @relation(fields: [itemID], references: [id])
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  isActive    Boolean        @default(true)
}

model Customer {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  phoneNumber   Int       @unique
  dob           DateTime?
  lastVisitDate DateTime
  orders        Order[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isActive      Boolean   @default(true)
}

model Order {
  id          String      @id @default(cuid())
  customerId  String
  employeeId  String
  totalAmount Float
  date        DateTime
  customer    Customer    @relation(fields: [customerId], references: [id])
  employee    Employee?   @relation(fields: [employeeId], references: [id])
  orderItems  OrderItem[]
  comments    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  isActive    Boolean     @default(true)
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  menuItemId String
  quantity   Int
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  order      Order    @relation(fields: [orderId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isActive   Boolean  @default(true)
}

model MenuItem {
  id          String            @id @default(cuid())
  name        String
  price       Float
  category    String
  ingredients MenuItemProduct[]
  orderItems  OrderItem[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  isActive    Boolean           @default(true)
}

model MenuItemProduct {
  id         String     @id @default(cuid())
  menuItemId String
  productId  String
  quantity   Int
  menuItem   MenuItem   @relation(fields: [menuItemId], references: [id])
  product    ItemMaster @relation(fields: [productId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  isActive   Boolean    @default(true)
}

model Revenue {
  id        String   @id @default(cuid())
  amount    Float
  date      DateTime
  source    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
}

model GeneralExpense {
  id        String   @id @default(cuid())
  amount    Float
  date      DateTime
  category  String
  desc      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
}
